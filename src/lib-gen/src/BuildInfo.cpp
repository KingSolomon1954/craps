//---------------------------------------------------------------
//
// File: BuildInfo.cpp
//
//---------------------------------------------------------------

#include "gen/BuildInfo.h"
#include <sstream>
#include "BuildInfoDefs.h"

using namespace Gen;

/*-----------------------------------------------------------*//**

Construct a BuildInfo object with information obtained from
BuildInfoDefs.h, an autogenerated file created by CMake.

If values in BuildInfoDefs.h are not appropriate for your application
then an application can use the other constructor which lets you set
all the values explicitly.

@param appName
    The name of the application.
*/
BuildInfo::BuildInfo(std::string_view appName)
    : appName_    (appName)
    , major_      (BLD_MAJOR)
    , minor_      (BLD_MINOR)
    , patch_      (BLD_PATCH)
    , bldNum_     (BLD_NUMBER)
    , epochSecs_  (BLD_EPOCH)
    , dateTime_   (BLD_DATETIME)
    , creator_    (BLD_CREATOR)
    , branch_     (BLD_BRANCH)
    , commitHash_ (BLD_COMMIT_HASH)
{
    std::ostringstream sstr;

    sstr << major_ << "." << minor_ << "." << patch_ << "-" << bldNum_;
    quadlet_ = sstr.str();
    sstr.str("");
    sstr << major_ << "." << minor_ << "." << patch_;
    triplet_ = sstr.str();
    sstr.str("");
    sstr << major_ << "." << minor_;
    doublet_ = sstr.str();
    sstr.str("");
}

/*-----------------------------------------------------------*//**

Construct a BuildInfo object with the supplied build info.

@param appName
    The name of the application.

@param bldMajor
    The major version.

@param bldMinor
    The minor version.

@param bldPatch
    The patch version

@param bldNumber
    The build number. For reproducible builds a changing build 
    number should be avoided, in which case it is recommended to
    set this bldNumber to same value as bldEpochSecs.
    
@param bldEpochSecs
    Supply the build date and time as a Unix time stamp in seconds.
    For reproducible builds this value might come from the Unix
    timestamp of the last code commit in a git repository, not the
    actual time of the build as given by the build system or C
    preprocessor.

@param bldDateTime
    The date and time of the build in string format in accordance
    with RFC 3339 format. For reproducible builds this value should
    be the string representation the bldEpochSecs in RFC3339.

@param bldCreator
    The name of the user that performs the build. Usually this
    comes from environment variable ${LOGUSER} during the build
    process.

@param bldBranch
    The name of the repository branch the build is associated.

@param bldCommitHash
    The hash of the last commit associated with this build.
*/
BuildInfo::BuildInfo(
    std::string_view appName,
    unsigned         bldMajor,
    unsigned         bldMinor,
    unsigned         bldPatch,
    unsigned         bldNumber,
    unsigned         bldEpochSecs,
    std::string_view bldDateTime,
    std::string_view bldCreator,
    std::string_view bldBranch,
    std::string_view bldCommitHash)
    : appName_    (appName)
    , major_      (bldMajor)
    , minor_      (bldMinor)
    , patch_      (bldPatch)
    , bldNum_     (bldNumber)
    , epochSecs_  (bldEpochSecs)
    , dateTime_   (bldDateTime)
    , creator_    (bldCreator)
    , branch_     (bldBranch)
    , commitHash_ (bldCommitHash)
{
    std::ostringstream sstr;

    sstr << major_ << "." << minor_ << "." << patch_ << "-" << bldNum_;
    quadlet_ = sstr.str();
    sstr.str("");
    sstr << major_ << "." << minor_ << "." << patch_;
    triplet_ = sstr.str();
    sstr.str("");
    sstr << major_ << "." << minor_;
    doublet_ = sstr.str();
    sstr.str("");
}

/*-----------------------------------------------------------*//**

Destructor.

*/
BuildInfo::~BuildInfo()
{
}

/*-----------------------------------------------------------*//**

Returns the application's name.

@return
    The app name.
*/
std::string_view
BuildInfo::appName() const 
{
    return appName_;
}

/*-----------------------------------------------------------*//**

Returns the string major.minor.patch-bldNum

@return
    major.minor.patch.bldNum as a string
*/
std::string_view
BuildInfo::quadlet() const 
{
    return quadlet_;
}

/*-----------------------------------------------------------*//**

Returns the string major.minor.patch.

@return
    major.minor.patch as a string
*/
std::string_view
BuildInfo::triplet() const
{
    return triplet_;
}

/*-----------------------------------------------------------*//**

Returns the string major.minor

@return
    major.minor as a string
*/
std::string_view
BuildInfo::doublet() const
{
    return doublet_;
}

/*-----------------------------------------------------------*//**

Returns the date & time of the build as a string formated in accordance
with RFC 3339 (https://tools.ietf.org/html/rfc3339) which is itself a
subset of ISO 8601 date time interchange format.

@return
    The date and time of the build.
*/
std::string_view
BuildInfo::dateTime() const 
{
    return dateTime_;
}

/*-----------------------------------------------------------*//**

Returns the user that triggered the build.

@return
    The user name that triggered the build.
*/
std::string_view
BuildInfo::creator() const 
{
    return creator_;
}

/*-----------------------------------------------------------*//**

Returns the Git branch the associated with this build.

@return
    The name of the branch.
*/
std::string_view
BuildInfo::branch() const 
{
    return branch_;
}

/*-----------------------------------------------------------*//**

Returns the hash of the last commit on this branch at the time
the build was triggered.

@return
    The commit hash.
*/
std::string_view
BuildInfo::commitHash() const 
{
    return commitHash_;
}

/*-----------------------------------------------------------*//**

Returns the major version.

@return
    The major version number.
*/
unsigned      
BuildInfo::major() const
{
    return major_;
}

/*-----------------------------------------------------------*//**

Returns the minor version.

@return
    The minor version number.
*/
unsigned      
BuildInfo::minor() const
{
    return minor_;
}

/*-----------------------------------------------------------*//**

Returns the patch version.

@return
    The patch version number.
*/
unsigned      
BuildInfo::patch() const
{
    return patch_;
}

/*-----------------------------------------------------------*//**

Returns the build number.

@return
    The build number.
*/
unsigned      
BuildInfo::bldnum() const
{
    return bldNum_;
}

/*-----------------------------------------------------------*//**

Returns the epoch in seconds.

@return
    The epoch in seconds.
*/
unsigned      
BuildInfo::epoch() const
{
    return epochSecs_;
}

/*-----------------------------------------------------------*//**

Returns a short formatted string containing version info.

This is just the quadlet prepended with the application name.

Example formatted output looks like this:

    AppName v2.3.1-1608191117

@return
    A short form of version info.
*/
std::string
BuildInfo::shortInfo() const
{
    std::ostringstream sstr;
    sstr << appName_ << " v"
         << quadlet_ << std::endl;
    return sstr.str();
}

/*-----------------------------------------------------------*//**

Returns a long formatted string of version and build info.

Example formatted output looks like this:
@code{.unparsed}
   SampleApp v2.3.1-1608191117
       Built by: Elvis
       Build date: 2020-12-17T07:45:17Z
       Build epoch: 1608191117
       Build branch: empty (not in a repo)
       Last commit hash: empty (not in a repo)
@endcode

@return
    A long form of version info.
*/
std::string
BuildInfo::fullInfo() const
{
    std::ostringstream sstr;
    sstr << appName_ << " v"
         << quadlet_ << std::endl;
    sstr
        << "    Built by: "         << creator_    << std::endl
        << "    Build date: "       << dateTime_   << std::endl
        << "    Build epoch: "      << epochSecs_  << std::endl
        << "    Build branch: "     << branch_     << std::endl
        << "    Last commit hash: " << commitHash_ << std::endl;
    return sstr.str();
}

//----------------------------------------------------------------
